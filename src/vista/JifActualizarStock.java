/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import modelo.ConexionBD;
import modelo.Producto;

/**
 *
 * @author silva
 */
public class JifActualizarStock extends javax.swing.JInternalFrame {

    int id_Producto = 0;
    int cantidadProducto = 0;
    Producto mip;

    public JifActualizarStock() {
        initComponents();
        this.CargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2_Walpaper = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TXTCantidadActual = new javax.swing.JTextField();
        TXTCantidadNueva = new javax.swing.JTextField();
        BTNActualizar = new javax.swing.JButton();
        jComboBoxProducto = new javax.swing.JComboBox<>();

        jLabel2_Walpaper.setBackground(new java.awt.Color(0, 0, 153));

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Actualizar Stock Productos");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Actualizar Productos Stock");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Stock Actual:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setText("Stock Nuevo:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, 20));

        TXTCantidadActual.setEnabled(false);
        TXTCantidadActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTCantidadActualActionPerformed(evt);
            }
        });
        getContentPane().add(TXTCantidadActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 160, -1));

        TXTCantidadNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTCantidadNuevaActionPerformed(evt);
            }
        });
        getContentPane().add(TXTCantidadNueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 160, -1));

        BTNActualizar.setBackground(new java.awt.Color(204, 204, 255));
        BTNActualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BTNActualizar.setText("ACTUALIZAR");
        BTNActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(BTNActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, -1, -1));

        jComboBoxProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 160, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TXTCantidadNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTCantidadNuevaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCantidadNuevaActionPerformed

    private void BTNActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNActualizarActionPerformed

//seleccion Producto
        if (!jComboBoxProducto.getSelectedItem().equals("Seleccione Producto:")) {
            //validacion campo vacio Cantidad
            if (!TXTCantidadNueva.getText().isEmpty()) {
                // validar no ingrese otros caracteres 
                boolean validacion = validar(TXTCantidadNueva.getText().trim());
                if (validacion == true) {
                    if (Integer.parseInt(TXTCantidadNueva.getText()) > 0) {

                        int stockActual = Integer.parseInt(TXTCantidadActual.getText().trim());
                        int stockNuevo = Integer.parseInt(TXTCantidadNueva.getText().trim());
                        stockNuevo = stockActual + stockNuevo;
                        System.out.println("nuevo stock " + stockNuevo);
                        mip.setStockProducto(stockNuevo);
                        if (mip.actualizarStock()) {
                            JOptionPane.showMessageDialog(null, "Stock Actualizado");
                            jComboBoxProducto.setSelectedItem("Seleccione Producto:");
                            TXTCantidadActual.setText("");
                            TXTCantidadNueva.setText("");
                            this.CargarComboProductos();
                            frmPrincipal.vProductos = new JifProductos();
                            frmPrincipal.escritorio.add(frmPrincipal.vProductos);
                            frmPrincipal.vProductos.setVisible(true);

                        } else {
                            JOptionPane.showMessageDialog(null, "Error al Actualizar Stock");
                            jComboBoxProducto.setSelectedIndex(0);
                            TXTCantidadActual.setText("");
                            TXTCantidadNueva.setText("");
                            this.CargarComboProductos();
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "En la Cantidad debe ser mayor a 0 y no puede ser valor -");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "En la Cantidad no se admiten Caracteres no numericos");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Debe Ingresar nueva Cantidad");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un producto");

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_BTNActualizarActionPerformed

    private void TXTCantidadActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTCantidadActualActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCantidadActualActionPerformed

    private void jComboBoxProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProductoActionPerformed
        // TODO add your handling code here:
        if (jComboBoxProducto.getSelectedItem() != null) {
            System.out.println("action" + jComboBoxProducto.getSelectedIndex());
            mip = (Producto) jComboBoxProducto.getSelectedItem();
            int stock = mip.getStockProducto();
            System.out.println("stock " + stock);
            System.out.println("stock " + mip.getIdProducto());
            TXTCantidadActual.setText(stock + "");
        }


    }//GEN-LAST:event_jComboBoxProductoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNActualizar;
    private javax.swing.JTextField TXTCantidadActual;
    private javax.swing.JTextField TXTCantidadNueva;
    private javax.swing.JComboBox<Producto> jComboBoxProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel2_Walpaper;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

// Crear Metodo carga Productos
    private void CargarComboProductos() {
        try {
            PreparedStatement sql = ConexionBD.conexion.prepareStatement("SELECT * FROM Producto");
            ResultSet rs = sql.executeQuery();
            jComboBoxProducto.removeAllItems();

            Producto mip = new Producto();
            mip.setDescripcionProducto("Seleccione producto: ");

            jComboBoxProducto.addItem(mip);

            while (rs.next()) {
                System.out.println("Descripci√≥n del producto: " + rs.getString("descripcionProducto"));

                mip = new Producto();
                mip.setIdProducto(rs.getInt("id_producto"));
                mip.setDescripcionProducto(rs.getString("descripcionProducto"));
                mip.setStockProducto(rs.getInt("stock"));
                jComboBoxProducto.addItem(mip);
            }

            //   jComboBoxProducto.setSelectedIndex(-1); 
        } catch (SQLException e) {
            System.out.println("Error al cargar Producto " + e.toString());
        }
    }

// Metodo para mostrar stock del producto seleccionado 
    public void MostrarStock() {
        Producto unProducto = new Producto();
        int id_Producto = ((Producto) jComboBoxProducto.getSelectedItem()).getIdProducto();
        try {
            PreparedStatement sql = ConexionBD.conexion.prepareStatement("SELECT * FROM Producto WHERE id_Producto = ? ");
            sql.setInt(1, id_Producto);
            System.out.println(sql);
            ResultSet rs = sql.executeQuery();
            if (rs.next()) {
                unProducto = new Producto();
                unProducto.setIdProducto(rs.getInt("id_Producto"));
                unProducto.setCantidadProducto(rs.getInt("cantidadProducto"));
                unProducto.setStockProducto(rs.getInt("stock"));
                unProducto.setPrecioVenta(rs.getInt("precioVenta"));
                unProducto.setDescripcionProducto(rs.getString("descripcionProducto"));
                unProducto.setNombreProducto(rs.getString("NombreProducto"));
                unProducto.setId_categoria(rs.getInt("id_categoria"));

                TXTCantidadActual.setText(String.valueOf(cantidadProducto));
            } else {
                TXTCantidadActual.setText("");
            }

        } catch (SQLException e) {
            System.out.println("Error al mostrar stock " + e.toString());
        }
    }

//metodo validar
    private boolean validar(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

}
